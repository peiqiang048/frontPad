module.exports={
  message: {
		inputPassword: 'Please input a password',
		empty: 'empty',
		backspace: 'backspace',
		passwordInputError: 'Password input error!',
		amountRepresentation: 'Amount representation',
		version: "Ordering system version : 6.11.1",
		turnOver: "turnOver",
		day: "day",
		month: "month",
		year: "year",
		totalOrderAmount: "totalOrderAmount",
		totalDiscount: "totalDiscount",
		totalPay: "totalPay",
		storeName: "storeName",
		paymentTime: "paymentTime",
		receivablesNumber: "receivablesNumber",
		orderAmount: "orderAmount",
		discountAmount: "discountAmount",
		discountRate: "discountRate",
		paymentAmount: "paymentAmount",
		paymentMethodTwo: "paymentMethod",
		accountant: "accountant",
		manager: "manager",
		orderSearch: "orderSearch",
		unConfrim: "Unconfirmed",
		orderComplete: "Closed",
		orderUnComplete: "Unclosed",
		call: "call",
		calling: "calling",
		payList: "payList",
		refund: "refund",
		orderNumber: "orderNumber",
		search: "search",
		orderDateTime: "orderDateTime",
		receivablesNo: "Payment serial number",
		tableName: "tableName",
		orderSubtotal: "orderSubtotal",
		orderSototaxAmount: "orderSototaxAmount",
		orderTotalAmount: "orderTotalAmount",
		orderDiscountAmount: "orderDiscountAmount",
		orderDiscountRate: "orderDiscountRate",
		paymentAmount: "paymentAmount",
		orderStatus: "orderStatus",
		operator: "operator",
		orderListNoData: "orderListNoData",
		callTime: "callTime",
		callCount: "callCount",
		callListNoData: "callListNoData",
		handle: "handle",
		count: "count",
		time: "time",
		returns: "returns",
		cancel: "cancel",
		confirm: "confirm",
		payListNoData: "payListNoData",
		firstPage: "firstPage",
		prevPage: "prevPage",
		nextPage: "nextPage",
		lastPage: "lastPage",
		operate: "operate",
		payTime: "payTime",
		paymentAmounts: "paymentAmount",
		paymentMethod: "paymentMethod",
		emptyPlatform: "empty Platform",
		wakeUp: "wake Up",
		haveMeals: "have Meals",
		commodityInformation: "commodity Information",
		issuedOrder: "issued Order",
		numberDiners: "number Diners",
		opening: "opening",
		changeTables: "change Tables",
		numberOfPeopleModified: "number Of People Modified",
		detailedInformation: "detailed Information",
		obsoleteGoods: "obsolete Goods",
		quantityAndRemarks: "quantity And Remarks",
		specifications: "specifications",
		practice: "practice",
		ingredients: "ingredients",
		numberOfReturnedDishes: "number Of Returned Dishes:",
		remainingNumber: "remaining Number:",
		confirmReturn: "confirm Return",
		chooseReasonForReturning: "choose Reason For Returning",
		selectAnOrder: "select An Order",
		peopleModifiedSuccessfully: "people Modified Successfully",
		tableChangeOfSucceeded: "table Change Of Succeeded",
		confirmOrderSucceeded: "confirm Order Succeeded",
		OrderIsNotConfirmedAndCanNotReturned: "Order Is Not Confirmed And Can Not Returned",
		notIssued: "not Issued",
		people: "people",
		sendToTheChef: "send To The Chef",
		deleteItem: "delete Item",
		modifiedItem: "modified Item",
		addItem: "add Item",
		deleteDishes: "delete Dishes",
		oKToDelete: "oK To Delete",
		quantityOfNewProducts: "quantity Of New Products",
		orderNotes: "Order notes (up to 30 words)",
		remarks: "remarks",
		areYouSureToSettleAgain: "Are You Sure To Settle Again？",
		sureToHandle: "Are you sure to deal with it？",
		handleFail: "Processing failed",
		accountingPadOrder: "Accounting pad order",
		mobileUnconfirmedOrder: "Mobile unconfirmed order",
		guestPadOrder: "Guest pad order",
		orderAccount: {
			unsettled: "unsettled",
			settled: "settled",
			bottomLine: "I have a bottom line",
			inStoreDining: "In store dining (standard tax rate)",
			packAndTakeAway: "Pack and take (tax reduction)",
			discount: "discount",
			subtotal: "subtotal",
			foreignTax: "foreign tax",
			total: "total",
			uncollected: "uncollected",
			change: "change",
			money: " money",
			clear: "empty",
			closing: "closing",
			fullOrderDiscount: "order discount",
			fullOrderAllowance: "order allowance",
			fracture: "Discount",
			sure: "sure",
			messageA: "Failed to get information",
			messageB: "Please enter settlement amount",
			messageC: "Please check the settlement amount",
			messageD: "Allowance amount cannot be 0",
			messageE: "Please enter the correct offer information",
			messageF: "Parameter error, please exit and try again"
		},
		numberPeople: "Number of people",
		printing: "printing",
		orderQuantity: "order Quantity",
		pleaseEnterTheNumberOfPeople: "please Enter The Number Of People",
		printingSuccessful: "printing Successful",
		pleaseArrangeSeats: "please Arrange Seats",
		receptionTime: "reception Time",
		paymentSerialNumber: "payment Serial Number",
		lagTime: "lag Time",
		allocationOfSeats: "allocation Of Seats",
		abandonment: "abandonment",
		abandonedSuccessfully: "abandoned Successfully",
		seatingSuccess: "seating Success",
		areYouSureYouWantToDiscardIt: "are You Sure You Want To Discard It？",
		detail: "detail",
		the: "the",
		numberOfTimes: "number Of Times",
		timeOfPayment: "time Of Payment",
		orderDiscountMoney: "order Discount Money",
		order: "order",
		reception: "reception",
		arrangement: "arrangement",
		confirmed: "confirmed",
		settlement: "settlement",
		confirmOrder: "confirm Order",
		singlePoint: "single Point",
		reSettlement: "re Settlement",
		networkExceptionRequestFailed: "Network exception, request failed",
		startTime: "start Time",
		endTime: "end Time",
		diningStyle: "dining Style",
		storeDining: "store Dining",
		takeAway: "take Away",
		paidId: "paid Id",
		select: "select",
		startTimeCannotGreaterThanEndTime: "Start time cannot be greater than end time",
		paymentCode: "payment Code",
		read: "read",
		settlementSuccessful: "settlement Successful",
		settlementFailed: "settlement Failed",
		paymentTimeout: "payment Timeout",
		pleaseScanCode: "please Scan Code",
		remainingQuantityNotEnough: "The remaining quantity of goods is not enough to return",
		parameterVerificationFailed: "parameter Verification Failed",
		dataDoesNotExist: "data Does Not Exist",
		systemUnknownError: "system Unknown Error",
		accountingIncipientAbnormality: "accounting Incipient Abnormality",
		exceptionInGettingOrderInformation: "exception In Getting Order In formation",
		cashAccountingIsAbnormal: "cash Accounting Is Abnormal",
		backpaymentIsAbnormal: "backpayment Is Abnormal",
		reAccountingIsAbnormal: "re Accounting Is Abnormal",
		arrangedEmergency: "arranged Emergency",
		removeOneSeat: "remove One Seat",
		no: "no",
		annotationTime: "annotation Time",
		expenditureAmount: "expenditure Amount",
		relieve: "relieve",
		sureToCancelSeat: "Are you sure you want to cancel the seat?？",
		seatRemoval: "seat Removal",
		seatCancellationSucceeded: "Seat cancellation succeeded!",
		orderItemExitCheck: "Order information does not exist, please order"
  }
}